{"config": {"Build Date": "17 Mar 2022", "Commit": "ac98382", "LLVM Version": "12.0.0", "Mull Version": "0.17.1", "URL": "https://github.com/mull-project/mull"}, "files": {"/home/tpugh_/saturday/more/hash/hash.c": {"language": "cpp", "mutants": [{"id": "cxx_rem_to_div", "location": {"end": {"column": 16, "line": 18}, "start": {"column": 15, "line": 18}}, "mutatorName": "Replaced % with /", "replacement": "/", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 26}, "start": {"column": 31, "line": 26}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 38, "line": 28}, "start": {"column": 36, "line": 28}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 32}, "start": {"column": 7, "line": 32}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 51}, "start": {"column": 31, "line": 51}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 70, "line": 51}, "start": {"column": 68, "line": 51}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 53}, "start": {"column": 7, "line": 53}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 69}, "start": {"column": 31, "line": 69}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 38, "line": 71}, "start": {"column": 36, "line": 71}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 80}, "start": {"column": 7, "line": 80}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 17, "line": 92}, "start": {"column": 16, "line": 92}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 17, "line": 92}, "start": {"column": 16, "line": 92}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 26, "line": 92}, "start": {"column": 24, "line": 92}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 25, "line": 94}, "start": {"column": 23, "line": 94}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 14, "line": 121}, "start": {"column": 12, "line": 121}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 14, "line": 130}, "start": {"column": 12, "line": 130}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}], "source": "#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n\r\n#define SIZE 20\r\n\r\nstruct DataItem {\r\n   int data;   \r\n   int key;\r\n};\r\n\r\nstruct DataItem* hashArray[SIZE]; \r\nstruct DataItem* dummyItem;\r\nstruct DataItem* item;\r\n\r\nint hashCode(int key) {\r\n   return key % SIZE;\r\n}\r\n\r\nstruct DataItem *search(int key) {\r\n   //get the hash \r\n   int hashIndex = hashCode(key);  \r\n\t\r\n   //move in array until an empty \r\n   while(hashArray[hashIndex] != NULL) {\r\n\t\r\n      if(hashArray[hashIndex]->key == key)\r\n         return hashArray[hashIndex]; \r\n\t\t\t\r\n      //go to next cell\r\n      ++hashIndex;\r\n\t\t\r\n      //wrap around the table\r\n      hashIndex %= SIZE;\r\n   }        \r\n\t\r\n   return NULL;        \r\n}\r\n\r\nvoid insert(int key,int data) {\r\n\r\n   struct DataItem *item = (struct DataItem*) malloc(sizeof(struct DataItem));\r\n   item->data = data;  \r\n   item->key = key;\r\n\r\n   //get the hash \r\n   int hashIndex = hashCode(key);\r\n\r\n   //move in array until an empty or deleted cell\r\n   while(hashArray[hashIndex] != NULL && hashArray[hashIndex]->key != -1) {\r\n      //go to next cell\r\n      ++hashIndex;\r\n\t\t\r\n      //wrap around the table\r\n      hashIndex %= SIZE;\r\n   }\r\n\t\r\n   hashArray[hashIndex] = item;\r\n}\r\n\r\nstruct DataItem* delete(struct DataItem* item) {\r\n   int key = item->key;\r\n\r\n   //get the hash \r\n   int hashIndex = hashCode(key);\r\n\r\n   //move in array until an empty\r\n   while(hashArray[hashIndex] != NULL) {\r\n\t\r\n      if(hashArray[hashIndex]->key == key) {\r\n         struct DataItem* temp = hashArray[hashIndex]; \r\n\t\t\t\r\n         //assign a dummy item at deleted position\r\n         hashArray[hashIndex] = dummyItem; \r\n         return temp;\r\n      }\r\n\t\t\r\n      //go to next cell\r\n      ++hashIndex;\r\n\t\t\r\n      //wrap around the table\r\n      hashIndex %= SIZE;\r\n   }      \r\n\t\r\n   return NULL;        \r\n}\r\n\r\nvoid display() {\r\n   int i = 0;\r\n\t\r\n   for(i = 0; i<SIZE; i++) {\r\n\t\r\n      if(hashArray[i] != NULL)\r\n         printf(\" (%d,%d)\",hashArray[i]->key,hashArray[i]->data);\r\n      else\r\n         printf(\" ~~ \");\r\n   }\r\n\t\r\n   printf(\"\\n\");\r\n}\r\n\r\nint main() {\r\n   dummyItem = (struct DataItem*) malloc(sizeof(struct DataItem));\r\n   dummyItem->data = -1;  \r\n   dummyItem->key = -1; \r\n\r\n   insert(1, 20);\r\n   insert(2, 70);\r\n   insert(42, 80);\r\n   insert(4, 25);\r\n   insert(12, 44);\r\n   insert(14, 32);\r\n   insert(17, 11);\r\n   insert(13, 78);\r\n   insert(37, 97);\r\n\r\n   display();\r\n   item = search(37);\r\n\r\n   if(item != NULL) {\r\n      printf(\"Element found: %d\\n\", item->data);\r\n   } else {\r\n      printf(\"Element not found\\n\");\r\n   }\r\n\r\n   delete(item);\r\n   item = search(37);\r\n\r\n   if(item != NULL) {\r\n      printf(\"Element found: %d\\n\", item->data);\r\n   } else {\r\n      printf(\"Element not found\\n\");\r\n   }\r\n}"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.17.1, LLVM 12.0.0"}, "mutationScore": 43, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}